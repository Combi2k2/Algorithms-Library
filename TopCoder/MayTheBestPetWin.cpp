#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

int N;
bool dp [50][500000];
vector<int> a;
vector<int> b;

int minimize(int n, int k){
    if(n==N)
        return 1;
    if (dp[n][k]!=-1)
        return dp[n][k];
    dp[n][k] = 0;
    if (k>=a[n])
        dp[n][k]|=minimize(n+1,k-a[n]);
    dp[n][k]|=minimize(n+1,k+b[n]);
    return dp[n][k];
}

int minimize1(int n, int k){
    if(n==-1)
        return 1;
    if (dp[n][k]!=-1)
        return dp[n][k];
    dp[n][k] = 0;
    if (k>=a[n])
        dp[n][k]|=minimize1(n-1,k-a[n]);
    dp[n][k]|=minimize1(n-1,k+b[n]);
    return dp[n][k];
}

class MayTheBestPetWin {
public:
	int calc(vector <int> A, vector <int> B) {
	    a = A;b = B;N = A.size();
	    int mini = 100000000;
	    memset(dp,-1,sizeof dp);
	    minimize(0,0);
	    for (int i=1;i<500001;i++)
        if (dp[N-1][i]){
            mini = i;
            break;
        }
	    memset(dp,-1,sizeof dp);
	    minimize1(N-1,0);
	    for (int i=1;i<500001;i++)
        if (dp[N-1][i] == 1){
            mini = i;
            break;
        }
        return mini;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MayTheBestPetWin *obj;
	int answer;
	obj = new MayTheBestPetWin();
	clock_t startTime = clock();
	answer = obj->calc(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {3,4,4,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4,4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,3,5,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,5,6,8,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {2907,949,1674,6092,8608,5186,2630,970,1050,2415,1923,2697,5571,6941,8065,4710,716,756,5185,1341,993,5092,248,1895,4223,1783,3844,3531,2431,1755,2837,4015};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7296,6954,4407,9724,8645,8065,9323,8433,1352,9618,6487,7309,9297,8999,9960,5653,4721,7623,6017,7320,3513,6642,6359,3145,7233,5077,6457,3605,2911,4679,5381,6574};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 52873;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
