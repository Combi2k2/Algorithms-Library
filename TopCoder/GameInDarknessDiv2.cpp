#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;


class GameInDarknessDiv2 {
public:
    string am;
    int mm;
    int dx[4];
    int dy[4];
    int s1, s2;
    vector<string> grid;
    int vis [51][51][51*50];
    int dfs(int ax, int ay, int bx, int by, int mn){
        if (mn==mm)
            return 1;
        if (vis[bx][by][mn])
            return 0;
        switch(am[mn]){
            case 'U': ax--;break;
            case 'R': ay++;break;
            case 'L': ay--;break;
            case 'D': ax++;break;
        }
        if (ax==bx&&ay==by)
            return 0;
        vis[bx][by][mn] = 1;
        for (int i=0;i<4;i++){
            int nx = bx+dx[i], ny = by+dy[i];
            if (nx>=0&&ny>=0&&nx<s1&&ny<s2&&grid[nx][ny]!='#'&&!(nx==ax&&ny==ay)){
                if (dfs(ax,ay,nx,ny,mn+1))
                    return 1;
            }
        }
        return 0;
    }
	string check(vector <string> field, vector <string> moves) {
		am = "";
		memset(vis, 0, sizeof vis);
		s1 = field.size(), s2 = field[0].size();
		dx[0] = 1;dy[0] = 0;
		dx[1] = 0;dy[1] = 1;
		dx[2] = -1;dy[2] = 0;
		dx[3] = 0;dy[3] = -1;
		for (int i=0;i<moves.size();i++)
            am+=moves[i];
        mm = am.size();
        int ax, ay, bx, by;
        grid = field;
        for (int i=0;i<grid.size();i++)
            for (int j=0;j<grid[i].size();j++)
        if (grid[i][j]=='A'){
            ax = i;ay = j;
        }
        else if (grid[i][j]=='B'){
            bx = i;by = j;
        }
        if (dfs(ax,ay,bx,by,0))
            return "Bob wins";
        else return "Alice wins";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GameInDarknessDiv2 *obj;
	string answer;
	obj = new GameInDarknessDiv2();
	clock_t startTime = clock();
	answer = obj->check(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	string t0[] = {"A.B..","##.##","##.##"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RRDUR"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"A.B..","##.##","##..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RRRLD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Bob wins";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"###.#","###..","A..B#","###..","###.#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RR","R","UDD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"A.###",".B..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RDRRRLLLLUDUDRLURDLUD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Bob wins";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {".....",".#.#.","##.#.","A###.","B...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"D"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	string t0[] = {".#...#....#.......#....#......","...###.#.#..#.#.#..###...#.#.#",".#.#...#...#..#..#.....##.#...","#..#.##..##..#.#..###.#....#.#","..#..#..#...#...#....#..##.#..","#..##..#..##.#.#.####..#.#...#",".#....##.#.....#......##.#.#..",".###.#...#.#.#..#.#.##...##.#.",".....#.#.##..#.#..##...##...#.","#.#.#...#...#.#.#...#.#.#.##.#",".#..##.#..##..#.###...........","..##.....####.......##.#.#.##.","#....##.#.#...####.#...#.#.#..","#.#.#......##.#...#..#.#..#..#","..#..#.#.##...#.#..#..#..#..#.",".#..#...#...#..#..#.#..#..#A#.","..#..#.#.B##.##..#...#.#.##...","#.#.##..#......#.#.#.#.#...#.#","#.#...#.######...#.#.#.#.#.#..","..#.##.#.....#.##..#...#.#.#.#",".#..#..#.#.#.#.#..#.#####..#.#","..#.#.##.#.#.##.#......#..#...","#..#.....#.#.....#.#.##..##.#.","##..###.#..#.#.#.#..##..#...##","##.#...#..##.#.#..#.#..#.#.#..","#..#.#.####..#..#..#..#......#","..#..#.....####..#.##.#.###.#.",".#..#.####.#.#..#.....#...#...","..##.......#...#..####.##.#.#.","#....#.#.#..#.###....#....#..#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"UURURUULLLLLLLLLLDLLLLUDLLUDDLRDDDULLDLLDDRRRRRDDU","RRUUURUULLD"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Alice wins";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
